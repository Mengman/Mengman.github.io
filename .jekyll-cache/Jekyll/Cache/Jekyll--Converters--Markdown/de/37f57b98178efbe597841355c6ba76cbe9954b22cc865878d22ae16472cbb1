I"-m<h2 id="功能开关">功能开关</h2>
<p>本文受到 Pete Hodgson 的文章 <a href="https://www.martinfowler.com/articles/feature-toggles.html">Feature Toggles (aka Feature Flags)</a> 启发，原文内容比本文更加丰富。</p>

<h3 id="简单的功能开关">简单的功能开关</h3>

<p>场景一：你刚刚开发完一个新的功能，然后需求告诉你，由于这个功能使用场景的限制，需要添加一个开关，能够让这个功能在某些环境打开或者关闭。</p>

<p>场景二：你实现了一个新版本的算法，但是并不希望立刻在线上启用，希望能进行更多的测试，所以需要添加一个开关，在测试环境打开，在生产环境保持关闭。</p>

<p>这个时候你只需要实现一个简单的功能开关即可。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">doSomeThing</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">useNewAlgorithm</span> <span class="o">:=</span> <span class="no">false</span>
    <span class="c">// useNewAlgorithm := true // uncomment if you working with new algorithm</span>
    <span class="k">if</span> <span class="n">useNewAlgoritem</span> <span class="p">{</span>
        <span class="n">doSomeThingNew</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">doSomeThingOld</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">doSomeThingNew</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// implement something new</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">doSomeThingOld</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// implement something old</span>
<span class="p">}</span>

</code></pre></div></div>

<p>我们把新的功能写到 <code>doSomeThingNew</code> 函数中，并通过 <code>useNewAlgorithm</code> 变量来控制是否调用新功能。这个方法虽然简单，但是我们无法在运行时动态的去决定是否启用新的功能。为了实现对于新功能的动态控制，我们可以引入一个<strong>开关路由器</strong>（toggle router）来实现。</p>

<h3 id="开关路由器">开关路由器</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">ToggleRouter</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">featureConfig</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">struct</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">tr</span> <span class="o">*</span><span class="n">ToggleRouter</span><span class="p">)</span> <span class="n">SetFeature</span><span class="p">(</span><span class="n">featureName</span> <span class="kt">string</span><span class="p">,</span> <span class="n">isEnabled</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">isEnabled</span> <span class="p">{</span>
		<span class="n">tr</span><span class="o">.</span><span class="n">featureConfig</span><span class="p">[</span><span class="n">featureName</span><span class="p">]</span> <span class="o">=</span> <span class="k">struct</span><span class="p">{}{}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nb">delete</span><span class="p">(</span><span class="n">tr</span><span class="o">.</span><span class="n">featureConfig</span><span class="p">,</span> <span class="n">featureName</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">tr</span> <span class="o">*</span><span class="n">ToggleRouter</span><span class="p">)</span> <span class="n">IsFeatureEnabled</span><span class="p">(</span><span class="n">featureName</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">tr</span><span class="o">.</span><span class="n">featureConfig</span><span class="p">[</span><span class="n">featureName</span><span class="p">]</span>
	<span class="k">return</span> <span class="n">ok</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewToggleRouter</span><span class="p">(</span><span class="n">features</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">tr</span> <span class="o">*</span><span class="n">ToggleRouter</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">tr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ToggleRouter</span><span class="p">{</span>
		<span class="n">featureConfig</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">struct</span><span class="p">{}),</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">feat</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">features</span> <span class="p">{</span>
		<span class="n">tr</span><span class="o">.</span><span class="n">SetFeature</span><span class="p">(</span><span class="n">feat</span><span class="p">,</span> <span class="no">true</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">toggleRouter</span> <span class="o">=</span> <span class="n">NewToggleRouter</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">"newAlgo"</span><span class="p">})</span>

<span class="k">func</span> <span class="n">doSomeThing</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">toggleRouter</span><span class="o">.</span><span class="n">IsFeatureEnabled</span><span class="p">(</span><span class="s">"newAlgo"</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">doSomeThingNew</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">doSomeThingOld</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>通过开关路由器我们可以动态的设置功能的启用与否。ToggleRouter 可以通过配置文件创建，或者通过配置界面，或者 API 接口来进行配置。到现在问题似乎已经解决了，然而随着越来越多的新功能加入，越来越多的功能需要通过开关来配置是否开启，代码中出现了越来越多的<strong>开关点</strong>，代码也变得越来越难以理解和维护。</p>

<p>让我们看一个新例子，<code>InvoiceEmailler</code> 会根据收据发送一封电子邮件，现在我们希望能加上一个新的功能，在邮件中添加退货链接。而这个退货链接只是在特定的情况下才会触发。下面代码中是根据 开关中是否包含 <code>next-gen-ecomm</code> 来判断的。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">toggle</span> <span class="o">=</span> <span class="n">GetFeatureToggleRouter</span><span class="p">()</span>

<span class="k">type</span> <span class="n">InvoiceEmailler</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">invoice</span> <span class="n">Invoice</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">emailler</span> <span class="o">*</span><span class="n">InvoiceEmailler</span><span class="p">)</span> <span class="n">GenerateInvoiceEmail</span><span class="p">()</span> <span class="n">Email</span> <span class="p">{</span>
    <span class="n">baseEmail</span> <span class="o">:=</span> <span class="n">buildEmailForInvoice</span><span class="p">(</span><span class="n">emailler</span><span class="o">.</span><span class="n">invoice</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">toggle</span><span class="o">.</span><span class="n">IsFeatureEnabled</span><span class="p">(</span><span class="s">"next-gen-ecomm"</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">addOrderCallationContentToEmail</span><span class="p">(</span><span class="n">baseEmail</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">baseEmail</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>但是，对于一个功能是否启用的判断逻辑可能是十分复杂的，也许在 A 情况下需要开启，在 B 情况下需要关闭；或者需要对某一部分用户开启这一项功能，对另一部分用户关闭这一功能；开关的判断逻辑可能会频繁的迭代。如果要更新判断逻辑，我们不得不在每个开关点去修改判断逻辑。这是代码中的第一个问题：<strong>开关点与开关的判断逻辑耦合在一起</strong>。</p>

<h3 id="解耦开关点与开关路由器">解耦开关点与开关路由器</h3>

<p>幸好<a href="https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering">“软件中的任何问题都可以通过引入一个间接层来解决”</a>, 通过增加一个<strong>开关逻辑判断层</strong>我们可以解耦开关点与开关判断逻辑。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">FeatureDecisions</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">toggle</span> <span class="o">*</span><span class="n">ToggleRouter</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">descisions</span> <span class="o">*</span><span class="n">FeatureDecisions</span><span class="p">)</span> <span class="n">IncludeOrderCancellationInEmail</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">descisions</span><span class="o">.</span><span class="n">toggle</span><span class="o">.</span><span class="n">IsFeatureEnabled</span><span class="p">(</span><span class="s">"new-gen-ecomm"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewFeatureDecisions</span><span class="p">(</span><span class="n">toggle</span> <span class="o">*</span><span class="n">ToggleRouter</span><span class="p">)</span> <span class="n">FeatureDecisions</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">FeatureDecisions</span><span class="p">{</span><span class="n">toggle</span><span class="o">:</span> <span class="n">toggle</span><span class="p">}</span>
<span class="p">}</span>


<span class="k">var</span> <span class="n">toggle</span> <span class="o">=</span> <span class="n">GetFeatureToggleRouter</span><span class="p">()</span>
<span class="k">var</span> <span class="n">featureDecisions</span> <span class="o">=</span> <span class="n">NewFeatureDecision</span><span class="p">(</span><span class="n">toggle</span><span class="p">)</span>

<span class="k">type</span> <span class="n">InvoiceEmailler</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">invoice</span> <span class="n">Invoice</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">emailler</span> <span class="o">*</span><span class="n">InvoiceEmailler</span><span class="p">)</span> <span class="n">GenerateInvoiceEmail</span><span class="p">()</span> <span class="n">Email</span> <span class="p">{</span>
    <span class="n">baseEmail</span> <span class="o">:=</span> <span class="n">buildEmailForInvoice</span><span class="p">(</span><span class="n">emailler</span><span class="o">.</span><span class="n">invoice</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">featureDecisions</span><span class="o">.</span><span class="n">IncludeOrderCancellationInEmail</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">addOrderCallationContentToEmail</span><span class="p">(</span><span class="n">baseEmail</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">baseEmail</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>通过引入 <code>FeatureDecisions</code> 之后，<code>InvoiceEmailler</code> 不再关心添加退货链接的逻辑是什么；而后续对与添加退货链接逻辑的更新也与 <code>InvoiceEmailler</code> 无关。从而实现了<strong>开关点与开关判断逻辑的解耦</strong>。</p>

<h3 id="判断翻转inversion-of-decision">判断翻转(Inversion of Decision)</h3>

<p>虽然在上一步中，我们通过添加<strong>判断逻辑层</strong>实现了判断逻辑与开关点的解耦，但是 <code>InvoiceEmailler</code> 依旧与 <code>FeatureDecisions</code> 耦合在一起，在执行 <code>GenerateInvoiceEmail()</code> 需要先创建或者获取 <code>FeatureDecisions</code> ，这处代码“坏味道”带来了两个问题：</p>

<ol>
  <li>它不方便对代码进行测试，在测试 <code>GenerateInvoiceEmail()</code> 函数之前，我们必须先设置好调用 <code>GetFeatureToggleRouter()</code> 与 <code>NewFeatureDecision()</code> 函数的环境，才能确保可以到达待测试逻辑代码块。</li>
  <li>随着项目功能模块的增多，每个模块都与 <code>FeatureDecisions</code> 模块发生了耦合，使得该模块变成了全局依赖模块。</li>
</ol>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// invoice_emailler.go</span>

<span class="k">type</span> <span class="n">EmaillerDecisions</span> <span class="k">interface</span> <span class="p">{</span>
    <span class="n">IncludeOrderCancellationInEmail</span><span class="p">()</span> <span class="kt">bool</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">InvoiceEmailler</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">invoice</span> <span class="n">Invoice</span>
    <span class="n">decisions</span> <span class="n">EmaillerDecisions</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">emailler</span> <span class="o">*</span><span class="n">InvoiceEmailler</span><span class="p">)</span> <span class="n">SetDecisions</span><span class="p">(</span><span class="n">decisions</span> <span class="o">*</span><span class="n">FeatureDecisions</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">emailler</span><span class="o">.</span><span class="n">decisions</span> <span class="o">=</span> <span class="n">decisions</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">emailler</span> <span class="o">*</span><span class="n">InvoiceEmailler</span><span class="p">)</span> <span class="n">GenerateInvoiceEmail</span><span class="p">()</span> <span class="n">Email</span> <span class="p">{</span>
    <span class="n">baseEmail</span> <span class="o">:=</span> <span class="n">buildEmailForInvoice</span><span class="p">(</span><span class="n">emailler</span><span class="o">.</span><span class="n">invoice</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">emailler</span><span class="o">.</span><span class="n">decisions</span><span class="o">.</span><span class="n">includeOrderCancellationInEmail</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">addOrderCallationContentToEmail</span><span class="p">(</span><span class="n">baseEmail</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">baseEmail</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">// inject decisions module</span>
<span class="k">func</span> <span class="n">NewInvoiceEmailler</span><span class="p">(</span><span class="n">decisions</span> <span class="n">EmaillerDecisions</span><span class="err">，</span> <span class="n">invoice</span> <span class="n">Invoice</span><span class="p">)</span> <span class="o">*</span><span class="n">InvoiceEmailler</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">InvoiceEmailler</span><span class="p">{</span>
        <span class="n">invoice</span><span class="o">:</span> <span class="n">invoice</span><span class="p">,</span>
        <span class="n">decisions</span><span class="o">:</span> <span class="n">decisions</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>此处“坏味道”的根本原因是业务模块对 <code>FeatureDecisions</code> 模块的依赖，通过<strong>控制反转</strong>在 <code>InvoiceEmailler</code> 模块创建时，将 <code>FeatureDecisions</code> 注入到 <code>InvoiceEmailler</code> 中，就可以消除业务模块对与 <code>FeatureDecisions</code> 模块的依赖。</p>

<h3 id="消除条件判断">消除条件判断</h3>

<p>到现在位置我们代码已经获得了很大优化，那我们能不能在进一步消除 <code>GenerateInvoiceEmail()</code> 函数的条件判断呢？ 对于简单的场景下的条件判断语句是没有什么问题的，但是在复杂的业务逻辑中，太多的条件判断并不利于代码的维护。比如如果配置中包含 feature “after-sales-service”,  需要在 email 中添加售后服务的信息。现在我们必须回到  <code>GenerateInvoiceEmail()</code>，修改判断条件再加上添加售后服务的信息。</p>

<p>通过策略模式，我们可以进一步的消除业务代码中的逻辑判断，提升代码的可扩展性。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">type</span> <span class="n">EmaillerDecisions</span> <span class="k">interface</span> <span class="p">{</span>
	<span class="n">IncludeOrderCancellationInEmail</span><span class="p">()</span> <span class="kt">bool</span>

	<span class="n">IncludeAfterSalesServiceInEmail</span><span class="p">()</span> <span class="kt">bool</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">AdditionalContentEnhancer</span> <span class="k">interface</span> <span class="p">{</span>
	<span class="n">EnhanceContent</span><span class="p">(</span><span class="n">Email</span><span class="p">)</span> <span class="n">Email</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">InvoiceEmailler</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">invoice</span>  <span class="n">Invoice</span>
	<span class="n">enhancer</span> <span class="n">AdditionalContentEnhancer</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">emailler</span> <span class="o">*</span><span class="n">InvoiceEmailler</span><span class="p">)</span> <span class="n">GenerateInvoiceEmail</span><span class="p">()</span> <span class="n">Email</span> <span class="p">{</span>
	<span class="n">baseEmail</span> <span class="o">:=</span> <span class="n">buildEmailForInvoice</span><span class="p">(</span><span class="n">emailler</span><span class="o">.</span><span class="n">invoice</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">enhancer</span><span class="o">.</span><span class="n">EnhanceContent</span><span class="p">(</span><span class="n">baseEmail</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">OrderCallationContentEnhancer</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="n">OrderCallationContentEnhancer</span><span class="p">)</span> <span class="n">addOrderCallationContentToEmail</span><span class="p">(</span><span class="n">email</span> <span class="n">Email</span><span class="p">)</span> <span class="p">(</span><span class="n">newEmail</span> <span class="n">Email</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// implement addOrderCallationContentToEmail</span>
	<span class="k">return</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="n">OrderCallationContentEnhancer</span><span class="p">)</span> <span class="n">EnhanceContent</span><span class="p">(</span><span class="n">email</span> <span class="n">Email</span><span class="p">)</span> <span class="n">Email</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">addOrderCallationContentToEmail</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">AfterSalesServiceContentEnhancer</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="n">AfterSalesServiceContentEnhancer</span><span class="p">)</span> <span class="n">addAfterSalesServiceContentToEmail</span><span class="p">(</span><span class="n">email</span> <span class="n">Email</span><span class="p">)</span> <span class="p">(</span><span class="n">newEmail</span> <span class="n">Email</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// implement addAfterSalesServiceContentToEmail</span>
	<span class="k">return</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="n">AfterSalesServiceContentEnhancer</span><span class="p">)</span> <span class="n">EnhanceContent</span><span class="p">(</span><span class="n">email</span> <span class="n">Email</span><span class="p">)</span> <span class="n">Email</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">addAfterSalesServiceContentToEmail</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">OrderCallationAndAfterSalesServiceContentEnhancer</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">OrderCallationContentEnhancer</span>
	<span class="n">AfterSalesServiceContentEnhancer</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="n">OrderCallationAndAfterSalesServiceContentEnhancer</span><span class="p">)</span> <span class="n">EnhanceContent</span><span class="p">(</span><span class="n">email</span> <span class="n">Email</span><span class="p">)</span> <span class="n">Email</span> <span class="p">{</span>
	<span class="n">email</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">OrderCallationContentEnhancer</span><span class="o">.</span><span class="n">EnhanceContent</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
	<span class="n">email</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">AfterSalesServiceContentEnhancer</span><span class="o">.</span><span class="n">EnhanceContent</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">email</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">IdentityContentEnhancer</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="n">IdentityContentEnhancer</span><span class="p">)</span> <span class="n">EnhanceContent</span><span class="p">(</span><span class="n">email</span> <span class="n">Email</span><span class="p">)</span> <span class="n">Email</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">email</span>
<span class="p">}</span>

<span class="c">// inject decisions module</span>
<span class="k">func</span> <span class="n">NewInvoiceEmailler</span><span class="p">(</span><span class="n">decisions</span> <span class="n">EmaillerDecisions</span><span class="p">,</span> <span class="n">invoice</span> <span class="n">Invoice</span><span class="p">)</span> <span class="o">*</span><span class="n">InvoiceEmailler</span> <span class="p">{</span>
	<span class="n">emailler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">InvoiceEmailler</span><span class="p">{</span>
		<span class="n">invoice</span><span class="o">:</span> <span class="n">invoice</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="n">decisions</span><span class="o">.</span><span class="n">IncludeOrderCancellationInEmail</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">decisions</span><span class="o">.</span><span class="n">IncludeAfterSalesServiceInEmail</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">emailler</span><span class="o">.</span><span class="n">enhancer</span> <span class="o">=</span> <span class="n">OrderCallationAndAfterSalesServiceContentEnhancer</span><span class="p">{}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">decisions</span><span class="o">.</span><span class="n">IncludeOrderCancellationInEmail</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">emailler</span><span class="o">.</span><span class="n">enhancer</span> <span class="o">=</span> <span class="n">OrderCallationContentEnhancer</span><span class="p">{}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">decisions</span><span class="o">.</span><span class="n">IncludeAfterSalesServiceInEmail</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">emailler</span><span class="o">.</span><span class="n">enhancer</span> <span class="o">=</span> <span class="n">AfterSalesServiceContentEnhancer</span><span class="p">{}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">emailler</span><span class="o">.</span><span class="n">enhancer</span> <span class="o">=</span> <span class="n">IdentityContentEnhancer</span><span class="p">{}</span>
	<span class="p">}</span>

	<span class="k">return</span>
<span class="p">}</span>

</code></pre></div></div>

<p>到现在我们就差不多完成了对于代码的优化。</p>
:ET